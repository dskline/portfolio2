/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/brands/{brandDomain}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a brand
     * @description Fetch brand information by domain or ID
     *
     */
    get: operations["getBrandByDomainInPathParameter"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/brands/{nameQuery}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for brands matching a given name.
     * @description Search for brands matching a given name.
     *
     */
    get: operations["searchForBrandsMatchingNameQuery"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Brand search result */
    BrandSearchResult: {
      items?: components["schemas"]["Brand"][];
      total: number;
    };
    /** @description Object representing a brand */
    Brand: {
      images: components["schemas"]["ImageAsset"][];
      fonts: components["schemas"]["FontAsset"][];
      domain: string;
      claimed: boolean;
      name: string;
      description: string;
      links: {
        name: string;
        url: string;
      }[];
      logos: components["schemas"]["ImageAsset"][];
      colors: components["schemas"]["ColorAsset"][];
    };
    /** @description Brand color asset */
    ColorAsset: {
      brightness: number;
      hex: string;
      /** @enum {string} */
      type: "accent" | "brand" | "customizable" | "dark" | "light" | "vibrant";
    };
    /** @description Brand font asset */
    FontAsset: {
      originId?: string;
      /** @enum {string} */
      origin?: "adobe" | "custom" | "google" | "system";
      name?: string;
      type?: string;
      weights?: number[];
      items?: string;
    };
    /** @description Brand image asset */
    ImageAsset: {
      formats: components["schemas"]["ImageFormat"][];
      /** @enum {string} */
      theme: "light" | "dark";
      /** @enum {string} */
      type: "logo" | "icon" | "symbol" | "banner";
    };
    /** @description Brand image asset image format */
    ImageFormat: {
      size: number;
      src: string;
      /** @enum {string} */
      background: "transparent";
      format: string;
      width?: number;
      height?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getBrandByDomainInPathParameter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Domain or ID of the brand */
        brandDomain: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Brand data */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Brand"];
        };
      };
      /** @description Invalid domain or ID supplied */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The brand does not exist or the domain can't be resolved. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchForBrandsMatchingNameQuery: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The brand search name query */
        nameQuery: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Brand search result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrandSearchResult"];
        };
      };
      /** @description Invalid search query */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
